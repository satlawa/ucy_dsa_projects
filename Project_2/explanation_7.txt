#------------------------------------------------------#
#   problem 7 - Request Routing in a Web Server with a Trie
#------------------------------------------------------#

To solve this problem we are constructing a trie data structure as an
implementation of a web server router. As in problem 5 the trie has nodes where
every node contains a hash map with the children of the nodes. However, instead
of holding characters it is holding paths and handlers of web pages. The trie
is an very efficient data structure for a web server router.

As for time complexity of the trie, it is depended on the length of the path (l)
and the number of path parts in the trie (n). Hence, the worst case time
complexity for inserting or searching is O(l*n).
As for the space complexity the worst case scenario is when no word in the
trie has a common sequence of characters (prefix) resulting in O(n).

Time complexity:  O(l*n)
Space complexity: O(n)

#------------------------------------------------------#
